#!/usr/bin/env python
import os
import sys
import django

# Setup Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bookstore.settings')
django.setup()

from books.models import Book, Author, Category, BookImage
from decimal import Decimal
import random

def clean_and_add_proper_data():
    print("üßπ CLEAN D·ªÆ LI·ªÜU C≈®...")
    
    # X√≥a t·∫•t c·∫£ books c≈© (gi·ªØ l·∫°i categories v√† authors)
    Book.objects.all().delete()
    print("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ s√°ch c≈©")
    
    # L·∫•y authors v√† categories hi·ªán c√≥
    authors = list(Author.objects.all())
    categories = list(Category.objects.all())
    
    print(f"üìä C√≥ {len(authors)} t√°c gi·∫£ v√† {len(categories)} danh m·ª•c")
    
    # D·ªØ li·ªáu s√°ch KH√îNG TR√ôNG L·∫∂P v·ªõi gi√° r√µ r√†ng
    books_data = [
        # === S√ÅCH GI√Å R·∫∫ (10k - 49k) ===
        {"title": "Truy·ªán Ki·ªÅu", "price": 15000, "original_price": 20000, "description": "T√°c ph·∫©m kinh ƒëi·ªÉn c·ªßa Nguy·ªÖn Du"},
        {"title": "S·ªë ƒê·ªè", "price": 22000, "original_price": 30000, "description": "Ti·ªÉu thuy·∫øt c·ªßa V≈© Tr·ªçng Ph·ª•ng"},
        {"title": "L√£o H·∫°c", "price": 18000, "original_price": 25000, "description": "Truy·ªán ng·∫Øn c·ªßa Nam Cao"},
        {"title": "Ch√≠ Ph√®o", "price": 25000, "original_price": 32000, "description": "T√°c ph·∫©m c·ªßa Nam Cao"},
        {"title": "S√°ch T√¥ M√†u Tr·∫ª Em", "price": 12000, "original_price": 18000, "description": "S√°ch gi√°o d·ª•c cho b√©"},
        {"title": "Truy·ªán C·ªï T√≠ch Vi·ªát Nam", "price": 28000, "original_price": 35000, "description": "Tuy·ªÉn t·∫≠p truy·ªán c·ªï t√≠ch"},
        {"title": "Th∆° Xu√¢n Di·ªáu", "price": 35000, "original_price": 45000, "description": "Tuy·ªÉn t·∫≠p th∆° t√¨nh"},
        {"title": "Nh·ªØng Ng√†y Th∆° ·∫§u", "price": 42000, "original_price": 50000, "description": "H·ªìi k√Ω tu·ªïi th∆°"},
        {"title": "Cu·ªôc ƒê·ªùi L√† Nh·ªØng Chuy·∫øn ƒêi", "price": 48000, "original_price": 60000, "description": "S√°ch du l·ªãch"},
        
        # === S√ÅCH T·∫¶M TRUNG (50k - 149k) ===
        {"title": "Norwegian Wood", "price": 89000, "original_price": 120000, "description": "Ti·ªÉu thuy·∫øt c·ªßa Haruki Murakami"},
        {"title": "The Alchemist", "price": 95000, "original_price": 130000, "description": "Nh√† gi·∫£ kim - Paulo Coelho"},
        {"title": "Harry Potter T·∫≠p 1", "price": 125000, "original_price": 160000, "description": "H√≤n ƒë√° ph√π th·ªßy"},
        {"title": "Th√°m T·ª≠ Sherlock Holmes", "price": 78000, "original_price": 95000, "description": "Truy·ªán trinh th√°m kinh ƒëi·ªÉn"},
        {"title": "1984", "price": 85000, "original_price": 110000, "description": "Ti·ªÉu thuy·∫øt dystopia"},
        {"title": "Animal Farm", "price": 65000, "original_price": 80000, "description": "Tr·∫°i s√∫c v·∫≠t - George Orwell"},
        {"title": "ƒê·∫Øc Nh√¢n T√¢m", "price": 72000, "original_price": 90000, "description": "Ngh·ªá thu·∫≠t giao ti·∫øp"},
        {"title": "Think and Grow Rich", "price": 98000, "original_price": 115000, "description": "T∆∞ duy l√†m gi√†u"},
        {"title": "Rich Dad Poor Dad", "price": 105000, "original_price": 130000, "description": "Cha gi√†u cha ngh√®o"},
        {"title": "Conan Th√°m T·ª≠ L·ª´ng Danh", "price": 55000, "original_price": 70000, "description": "Manga trinh th√°m"},
        {"title": "Doraemon T·∫≠p ƒê·∫∑c Bi·ªát", "price": 62000, "original_price": 75000, "description": "Truy·ªán tranh thi·∫øu nhi"},
        {"title": "C√† Ph√™ C√πng Tony", "price": 68000, "original_price": 85000, "description": "S√°ch t√¢m l√Ω h·ªçc"},
        {"title": "M√≥n ƒÇn Ngon M·ªói Ng√†y", "price": 58000, "original_price": 72000, "description": "S√°ch n·∫•u ƒÉn"},
        {"title": "Du L·ªãch Vi·ªát Nam", "price": 118000, "original_price": 145000, "description": "C·∫©m nang du l·ªãch"},
        {"title": "L·ªãch S·ª≠ Vi·ªát Nam", "price": 132000, "original_price": 165000, "description": "S√°ch l·ªãch s·ª≠"},
        
        # === S√ÅCH CAO C·∫§P (150k - 299k) ===
        {"title": "Pride and Prejudice - Collector's Edition", "price": 189000, "original_price": 240000, "description": "Phi√™n b·∫£n s∆∞u t·∫≠p"},
        {"title": "The Great Gatsby - Illustrated", "price": 165000, "original_price": 200000, "description": "Gatsby vƒ© ƒë·∫°i c√≥ minh h·ªça"},
        {"title": "War and Peace - Complete", "price": 245000, "original_price": 320000, "description": "Chi·∫øn tranh v√† h√≤a b√¨nh"},
        {"title": "Les Mis√©rables - Hardcover", "price": 225000, "original_price": 280000, "description": "Nh·ªØng ng∆∞·ªùi kh·ªën kh·ªï"},
        {"title": "The Complete Shakespeare", "price": 289000, "original_price": 350000, "description": "To√†n t·∫≠p Shakespeare"},
        {"title": "One Hundred Years of Solitude", "price": 178000, "original_price": 220000, "description": "TrƒÉm nƒÉm c√¥ ƒë∆°n"},
        {"title": "7 Habits of Highly Effective People", "price": 158000, "original_price": 195000, "description": "7 th√≥i quen hi·ªáu qu·∫£"},
        
        # === S√ÅCH SI√äU CAO C·∫§P (300k+) ===
        {"title": "The Art of War - Luxury Edition", "price": 350000, "original_price": 450000, "description": "Binh ph√°p T√¥n T·ª≠ - phi√™n b·∫£n sang tr·ªçng"},
        {"title": "Encyclopedia Britannica - Premium", "price": 420000, "original_price": 500000, "description": "B√°ch khoa to√†n th∆∞"},
        {"title": "Oxford English Dictionary - Complete", "price": 650000, "original_price": 800000, "description": "T·ª´ ƒëi·ªÉn ti·∫øng Anh ƒë·∫ßy ƒë·ªß"},
        {"title": "Cambridge History of Literature", "price": 890000, "original_price": 1200000, "description": "L·ªãch s·ª≠ vƒÉn h·ªçc Cambridge"},
        {"title": "Medical Encyclopedia - Professional", "price": 750000, "original_price": 950000, "description": "B√°ch khoa y h·ªçc chuy√™n nghi·ªáp"},
    ]
    
    print(f"üìö T·∫°o {len(books_data)} s√°ch m·ªõi v·ªõi gi√° kh√¥ng tr√πng l·∫∑p...")
    
    created_count = 0
    for i, book_data in enumerate(books_data):
        # Random ch·ªçn author v√† category
        author = random.choice(authors)
        category = random.choice(categories)
        
        # T·∫°o slug t·ª´ title
        import re
        slug = re.sub(r'[^a-zA-Z0-9\s-]', '', book_data["title"].lower())
        slug = re.sub(r'\s+', '-', slug.strip())
        slug = f"{slug}-{i+1}"  # Th√™m s·ªë ƒë·ªÉ tr√°nh tr√πng slug
        
        # Random rating v√† quantity_sold
        rating = round(random.uniform(3.8, 5.0), 1)
        quantity_sold = random.randint(50, 800)
        stock_quantity = random.randint(10, 100)
        
        try:
            book = Book.objects.create(
                title=book_data["title"],
                slug=slug,
                description=book_data["description"],
                list_price=Decimal(str(book_data["price"])),
                original_price=Decimal(str(book_data["original_price"])),
                rating_average=Decimal(str(rating)),
                quantity_sold=quantity_sold,
                stock_quantity=stock_quantity,
                is_active=True,
            )
            
            # Add author v√† category
            book.authors.add(author)
            book.categories.add(category)
            
            created_count += 1
            print(f"‚úÖ {book.title} - {book.list_price}ƒë")
            
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o s√°ch {book_data['title']}: {e}")
    
    print(f"\nüéä HO√ÄN TH√ÄNH! ƒê√£ t·∫°o {created_count} s√°ch m·ªõi")
    
    # Th·ªëng k√™
    print("\nüìä TH·ªêNG K√ä THEO GI√Å:")
    under_50k = Book.objects.filter(list_price__lt=50000).count()
    range_50_150k = Book.objects.filter(list_price__gte=50000, list_price__lt=150000).count()
    range_150_300k = Book.objects.filter(list_price__gte=150000, list_price__lt=300000).count()
    over_300k = Book.objects.filter(list_price__gte=300000).count()
    
    print(f"üí∞ D∆∞·ªõi 50k: {under_50k} s√°ch")
    print(f"üí∞ 50k-150k: {range_50_150k} s√°ch")
    print(f"üí∞ 150k-300k: {range_150_300k} s√°ch")
    print(f"üí∞ Tr√™n 300k: {over_300k} s√°ch")
    print(f"üìñ T·ªïng c·ªông: {Book.objects.count()} s√°ch")

if __name__ == "__main__":
    clean_and_add_proper_data()
