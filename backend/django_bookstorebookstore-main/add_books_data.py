#!/usr/bin/env python
import os
import sys
import django

# Setup Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bookstore.settings')
django.setup()

from books.models import Book, Author, Category, BookImage
from decimal import Decimal
import random

def add_sample_data():
    print("üöÄ B·∫ÆT ƒê·∫¶U TH√äM D·ªÆ LI·ªÜU S√ÅCH...")
    
    # T·∫°o th√™m authors
    authors_data = [
        {"name": "Haruki Murakami", "slug": "haruki-murakami"},
        {"name": "Paulo Coelho", "slug": "paulo-coelho"},
        {"name": "J.K. Rowling", "slug": "jk-rowling"},
        {"name": "Agatha Christie", "slug": "agatha-christie"},
        {"name": "Stephen King", "slug": "stephen-king"},
        {"name": "George Orwell", "slug": "george-orwell"},
        {"name": "Gabriel Garc√≠a M√°rquez", "slug": "gabriel-garcia-marquez"},
        {"name": "Jane Austen", "slug": "jane-austen"},
        {"name": "Mark Twain", "slug": "mark-twain"},
        {"name": "Charles Dickens", "slug": "charles-dickens"},
        {"name": "Victor Hugo", "slug": "victor-hugo"},
        {"name": "Leo Tolstoy", "slug": "leo-tolstoy"},
        {"name": "William Shakespeare", "slug": "william-shakespeare"},
        {"name": "Ernest Hemingway", "slug": "ernest-hemingway"},
        {"name": "F. Scott Fitzgerald", "slug": "f-scott-fitzgerald"},
    ]
    
    authors = []
    for author_data in authors_data:
        author, created = Author.objects.get_or_create(
            slug=author_data["slug"],
            defaults={"name": author_data["name"]}
        )
        authors.append(author)
        if created:
            print(f"‚úÖ T·∫°o t√°c gi·∫£: {author.name}")
    
    # T·∫°o th√™m categories
    categories_data = [
        {"name": "Khoa h·ªçc vi·ªÖn t∆∞·ªüng", "slug": "khoa-hoc-vien-tuong"},
        {"name": "Trinh th√°m", "slug": "trinh-tham"},
        {"name": "Kinh doanh", "slug": "kinh-doanh"},
        {"name": "T√¢m l√Ω h·ªçc", "slug": "tam-ly-hoc"},
        {"name": "L·ªãch s·ª≠", "slug": "lich-su"},
        {"name": "Tri·∫øt h·ªçc", "slug": "triet-hoc"},
        {"name": "S√°ch thi·∫øu nhi", "slug": "sach-thieu-nhi"},
        {"name": "S·ª©c kh·ªèe", "slug": "suc-khoe"},
        {"name": "N·∫•u ƒÉn", "slug": "nau-an"},
        {"name": "Du l·ªãch", "slug": "du-lich"},
    ]
    
    categories = []
    for cat_data in categories_data:
        category, created = Category.objects.get_or_create(
            slug=cat_data["slug"],
            defaults={"name": cat_data["name"]}
        )
        categories.append(category)
        if created:
            print(f"‚úÖ T·∫°o danh m·ª•c: {category.name}")
    
    # Th√™m category hi·ªán c√≥
    existing_categories = list(Category.objects.all())
    categories.extend(existing_categories)
    
    # D·ªØ li·ªáu s√°ch v·ªõi gi√° ƒëa d·∫°ng
    books_data = [
        # S√°ch gi√° r·∫ª (10k - 50k)
        {"title": "Chuy·ªán C≈© H√† N·ªôi", "price": 15000, "original_price": 20000, "description": "Nh·ªØng c√¢u chuy·ªán v·ªÅ H√† N·ªôi x∆∞a"},
        {"title": "Truy·ªán Ki·ªÅu", "price": 25000, "original_price": 35000, "description": "T√°c ph·∫©m kinh ƒëi·ªÉn c·ªßa Nguy·ªÖn Du"},
        {"title": "S·ªë ƒê·ªè", "price": 30000, "original_price": 40000, "description": "Ti·ªÉu thuy·∫øt c·ªßa V≈© Tr·ªçng Ph·ª•ng"},
        {"title": "L√£o H·∫°c", "price": 18000, "original_price": 25000, "description": "Truy·ªán ng·∫Øn n·ªïi ti·∫øng c·ªßa Nam Cao"},
        {"title": "Ch√≠ Ph√®o", "price": 22000, "original_price": 30000, "description": "T√°c ph·∫©m b·∫•t h·ªß c·ªßa Nam Cao"},
        
        # S√°ch t·∫ßm trung (50k - 150k)
        {"title": "Norwegian Wood", "price": 89000, "original_price": 120000, "description": "Ti·ªÉu thuy·∫øt l√£ng m·∫°n c·ªßa Haruki Murakami"},
        {"title": "The Alchemist", "price": 95000, "original_price": 130000, "description": "Cu·ªën s√°ch tri·∫øt l√Ω n·ªïi ti·∫øng c·ªßa Paulo Coelho"},
        {"title": "Harry Potter v√† H√≤n ƒë√° Ph√π th·ªßy", "price": 125000, "original_price": 160000, "description": "Kh·ªüi ƒë·∫ßu c·ªßa series Harry Potter"},
        {"title": "Murder on the Orient Express", "price": 78000, "original_price": 95000, "description": "Ti·ªÉu thuy·∫øt trinh th√°m kinh ƒëi·ªÉn"},
        {"title": "The Shining", "price": 110000, "original_price": 145000, "description": "Ti·ªÉu thuy·∫øt kinh d·ªã c·ªßa Stephen King"},
        {"title": "1984", "price": 85000, "original_price": 110000, "description": "T√°c ph·∫©m dystopia n·ªïi ti·∫øng"},
        {"title": "Animal Farm", "price": 65000, "original_price": 80000, "description": "Ng·ª• ng√¥n ch√≠nh tr·ªã c·ªßa George Orwell"},
        {"title": "One Hundred Years of Solitude", "price": 135000, "original_price": 175000, "description": "Ki·ªát t√°c c·ªßa Gabriel Garc√≠a M√°rquez"},
        
        # S√°ch cao c·∫•p (150k - 300k)
        {"title": "Pride and Prejudice - Collector's Edition", "price": 189000, "original_price": 240000, "description": "Phi√™n b·∫£n s∆∞u t·∫≠p v·ªõi b√¨a c·ª©ng"},
        {"title": "The Great Gatsby - Illustrated", "price": 165000, "original_price": 200000, "description": "Phi√™n b·∫£n c√≥ minh h·ªça ƒë·∫πp m·∫Øt"},
        {"title": "War and Peace - Complete Edition", "price": 245000, "original_price": 320000, "description": "B·∫£n ƒë·∫ßy ƒë·ªß c·ªßa t√°c ph·∫©m kinh ƒëi·ªÉn"},
        {"title": "Les Mis√©rables - Hardcover", "price": 225000, "original_price": 280000, "description": "B√¨a c·ª©ng cao c·∫•p"},
        {"title": "The Complete Works of Shakespeare", "price": 289000, "original_price": 350000, "description": "To√†n t·∫≠p Shakespeare"},
        
        # S√°ch ƒë·∫Øt ti·ªÅn (300k+)
        {"title": "The Art of War - Luxury Edition", "price": 350000, "original_price": 450000, "description": "Phi√™n b·∫£n sang tr·ªçng v·ªõi ch√∫ th√≠ch chi ti·∫øt"},
        {"title": "Encyclop√¶dia Britannica - Digital Access", "price": 420000, "original_price": 500000, "description": "Truy c·∫≠p to√†n b·ªô b√°ch khoa to√†n th∆∞"},
        {"title": "Oxford English Dictionary - Premium", "price": 650000, "original_price": 800000, "description": "T·ª´ ƒëi·ªÉn ti·∫øng Anh cao c·∫•p nh·∫•t"},
        {"title": "The Cambridge History of Literature", "price": 890000, "original_price": 1200000, "description": "B·ªô s√°ch l·ªãch s·ª≠ vƒÉn h·ªçc ƒë·∫ßy ƒë·ªß"},
        
        # S√°ch n·∫•u ƒÉn & lifestyle
        {"title": "M√≥n Vi·ªát M·ªói Ng√†y", "price": 45000, "original_price": 60000, "description": "300 m√≥n ƒÉn Vi·ªát Nam"},
        {"title": "C√† Ph√™ Vi·ªát Nam", "price": 55000, "original_price": 70000, "description": "VƒÉn h√≥a c√† ph√™ Vi·ªát"},
        {"title": "Du L·ªãch Vi·ªát Nam", "price": 120000, "original_price": 150000, "description": "C·∫©m nang du l·ªãch to√†n qu·ªëc"},
        
        # S√°ch thi·∫øu nhi
        {"title": "Conan Th√°m T·ª≠ L·ª´ng Danh - T·∫≠p 1", "price": 35000, "original_price": 45000, "description": "Manga trinh th√°m n·ªïi ti·∫øng"},
        {"title": "Doraemon - T·∫≠p ƒë·∫∑c bi·ªát", "price": 40000, "original_price": 50000, "description": "Truy·ªán tranh thi·∫øu nhi kinh ƒëi·ªÉn"},
        {"title": "S√°ch T√¥ M√†u Cho B√©", "price": 25000, "original_price": 35000, "description": "S√°ch t√¥ m√†u gi√°o d·ª•c"},
        
        # S√°ch kinh doanh & ph√°t tri·ªÉn b·∫£n th√¢n
        {"title": "ƒê·∫Øc Nh√¢n T√¢m", "price": 78000, "original_price": 95000, "description": "S√°ch k·ªπ nƒÉng giao ti·∫øp n·ªïi ti·∫øng"},
        {"title": "Think and Grow Rich", "price": 92000, "original_price": 115000, "description": "S√°ch v·ªÅ t∆∞ duy l√†m gi√†u"},
        {"title": "The 7 Habits of Highly Effective People", "price": 145000, "original_price": 180000, "description": "7 th√≥i quen hi·ªáu qu·∫£"},
        {"title": "Rich Dad Poor Dad", "price": 115000, "original_price": 140000, "description": "S√°ch v·ªÅ t√†i ch√≠nh c√° nh√¢n"},
    ]
    
    print(f"üìö Chu·∫©n b·ªã th√™m {len(books_data)} quy·ªÉn s√°ch...")
    
    for i, book_data in enumerate(books_data):
        # Random ch·ªçn author v√† category
        author = random.choice(authors)
        category = random.choice(categories)
        
        # T·∫°o slug t·ª´ title
        slug = book_data["title"].lower().replace(" ", "-").replace(".", "").replace(",", "").replace("'", "").replace("-", "-")
        slug = slug.encode('ascii', 'ignore').decode('ascii')  # Remove non-ASCII
        if not slug:
            slug = f"book-{i+1}"
        
        # Random rating v√† quantity_sold
        rating = round(random.uniform(3.5, 5.0), 1)
        quantity_sold = random.randint(10, 1000)
        stock_quantity = random.randint(5, 100)
        
        book, created = Book.objects.get_or_create(
            slug=slug,
            defaults={
                "title": book_data["title"],
                "description": book_data["description"],
                "list_price": Decimal(str(book_data["price"])),
                "original_price": Decimal(str(book_data["original_price"])),
                "rating_average": Decimal(str(rating)),
                "quantity_sold": quantity_sold,
                "stock_quantity": stock_quantity,
                "is_active": True,
            }
        )
        
        if created:
            # Add author v√† category
            book.authors.add(author)
            book.categories.add(category)
            
            # Random th√™m author th·ª© 2 (30% chance)
            if random.random() < 0.3:
                second_author = random.choice(authors)
                if second_author != author:
                    book.authors.add(second_author)
            
            # Random th√™m category th·ª© 2 (20% chance)
            if random.random() < 0.2:
                second_category = random.choice(categories)
                if second_category != category:
                    book.categories.add(second_category)
            
            print(f"‚úÖ Th√™m s√°ch: {book.title} - {book.list_price}ƒë - {author.name}")
    
    print("\nüéä HO√ÄN TH√ÄNH! Th·ªëng k√™:")
    print(f"üìñ T·ªïng s·ªë s√°ch: {Book.objects.count()}")
    print(f"üë®‚Äçüíº T·ªïng s·ªë t√°c gi·∫£: {Author.objects.count()}")
    print(f"üè∑Ô∏è T·ªïng s·ªë danh m·ª•c: {Category.objects.count()}")
    
    # Th·ªëng k√™ theo gi√°
    print("\nüí∞ Th·ªëng k√™ theo gi√°:")
    print(f"D∆∞·ªõi 50k: {Book.objects.filter(list_price__lt=50000).count()} s√°ch")
    print(f"50k-150k: {Book.objects.filter(list_price__gte=50000, list_price__lt=150000).count()} s√°ch")
    print(f"150k-300k: {Book.objects.filter(list_price__gte=150000, list_price__lt=300000).count()} s√°ch")
    print(f"Tr√™n 300k: {Book.objects.filter(list_price__gte=300000).count()} s√°ch")

if __name__ == "__main__":
    add_sample_data()
